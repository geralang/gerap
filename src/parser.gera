
mod gerap::parser

use std::(str, iter, opt, arr)

proc is_digit(c) {
    var digits = "0123456789"
    return digits
        |> str::find(c |> str::at(0))
        |> iter::next()
        |> opt::is_some()
}

proc is_letter(c) {
    // letters sorted by frequency
    var letters = "etainoshrdlucmfwygpbvkqjxzETAINOSHRDLUCMFWYGPBVKQJXZ"
    return letters
        |> str::find(c)
        |> iter::next()
        |> opt::is_some()
}

proc is_alphanumerical(c) {
    return is_digit(c) || is_letter(c) || c == "_"
}

proc parse_token(file, idx) {
    var c = file |> str::at(idx)
    case is_alphanumerical(c) -> {
        var end = idx..length(file)
            |> iter::find(|i| !(file |> str::at(i) |> is_alphanumerical()))
            |> opt::unwrap_or(file |> length())
        return #some {
            type = "identifier", content = file |> substring(idx, end),
            s = end - idx
        }
    }
    case c {
        "=" -> return #some { type = "equals", content = "=", s = 1 }
        "[" -> return #some { type = "square_open", content = "[", s = 1 }
        "]" -> return #some { type = "square_close", content = "]", s = 1 }
        "<" -> {
            var end = (idx + 1)..length(file)
                |> iter::find(|i| str::at(file, i) == ">")
            case end {
                #none -> return #err "unclosed URL"
                #some e -> return #some {
                    type = "url", content = file |> substring(idx + 1, e),
                    s = e - idx + 1
                }
            }
        }
        "\"" -> {
            var end = (idx + 1)..length(file)
                |> iter::find(|i| str::at(file, i) == "\"")
            case end {
                #none -> return #err "unclosed string"
                #some e -> return #some {
                    type = "string", s = e - idx + 1,
                    content = file |> substring(idx + 1, e),
                }
            }
        }
        " " -> return #none unit
        "\n" -> return #none unit
    }
    return #err "unexpected '_'" |> str::fmt([c])
}

proc as_tokens(file) {
    var current = {
        idx = 0,
        failed = false
    }
    return || {
        case current.idx >= length(file) -> return #end unit
        case current.failed -> return #end unit
        var result = { value = #none unit }
        exhaust(|| {
            case current.idx >= length(file) -> return #end unit
            case file |> parse_token(current.idx) {
                #err e -> {
                    result.value = #some #err e
                    current.failed = true
                }
                #none -> current.idx = current.idx + 1
                #some t -> {
                    result.value = #some #ok t
                    current.idx = current.idx + t.s
                }
            }
            return result.value
                |> opt::map(|v| #end unit)
                |> opt::unwrap_or(#next unit)
        })
        return result.value
            |> opt::map(|v| #next v)
            |> opt::unwrap_or(#end unit)
    }
}

proc unmet_expect(expected, got) {
    return "expected _, but got '_'" |> str::fmt([expected, got])
}

proc unexpected_end(expected) {
    return "expected _, but reached the end of the file" |> str::fmt([expected])
}

proc parse_string(tokens) {
    case tokens |> iter::next() {
        #none -> return #err unexpected_end(
            "a string"
        )
        #some p -> case p {
            #ok t -> {
                case t.type == "string" -> return #ok t.content
                else return #err unmet_expect("a string", t.content)
            }
            #err e -> return #err e
        }
    }
}

proc parse_list(tokens, item_parser) {
    case tokens |> iter::next() {
        #none -> return #err unexpected_end(
            "an opening square bracket ('[')"
        )
        #some p -> case p {
            #ok t -> case t.type != "square_open" -> return #err unmet_expect(
                "an opening square bracket ('[')", t.content
            )
            #err e -> return #err e
        }
    }
    var encountered = {
        error = #none unit,
        items = []
    }
    exhaust(|| {
        case item_parser() {
            #err e -> {
                encountered.error = #some e
                return #end unit
            }
            #ok value -> case value {
                #end -> return #end unit
                #next v -> {
                    encountered.items = encountered.items |> arr::concat([v])
                    return #next unit
                }
            }
        }
    })
    return encountered.error
        |> opt::map(|e| #err e)
        |> opt::unwrap_or_else(|| #ok encountered.items)
}

proc parse_string_list(tokens) {
    return tokens |> parse_list(|| {
        case tokens |> iter::next() {
            #none -> return #err unexpected_end(
                "a string or a closing square bracket (']')"
            )
            #some p -> case p {
                #ok t -> case t.type {
                    "string" -> return #ok #next t.content
                    "square_close" -> return #ok #end unit
                } else return #err unmet_expect(
                    "a string or a closing square bracket (']')", t.content
                )
                #err e -> return #err e
            }
        }
    })
}

proc parse_resource(tokens) {
    case tokens |> iter::next() {
        #none -> return #err unexpected_end(
            "a string or URL"
        )
        #some p -> case p {
            #ok t -> case t.type {
                "string" -> return #ok #file t.content
                "url" -> return #ok #url t.content
            } else return #err unmet_expect(
                "a string or URL", t.content
            )
            #err e -> return #err e
        }
    }
}

proc parse_resource_list(tokens) {
    return tokens |> parse_list(|| {
        case tokens |> iter::next() {
            #none -> return #err unexpected_end(
                "a string, URL or a closing square bracket (']')"
            )
            #some p -> case p {
                #ok t -> case t.type {
                    "string" -> return #ok #next #file t.content
                    "url" -> return #ok #next #url t.content
                    "square_close" -> return #ok #end unit
                } else return #err unmet_expect(
                    "a string, URL or a closing square bracket (']')", t.content
                )
                #err e -> return #err e
            }
        }
    })
}

pub proc parse_file(file) {
    var project = {
        name = #none unit,
        description = #none unit,
        authors = #none unit,
        version = #none unit,
        ctarget = #none unit,
        dependencies = #none unit,
        main = #none unit,
        build = #none unit,
        build_c = #none unit,
        build_js = #none unit,
        link_c = #none unit,
        link_js = #none unit,
        include = #none unit,
        include_c = #none unit,
        include_js = #none unit,
        c_core_deps = #none unit
    }
    var tokens = file |> as_tokens()
    var encountered = { error = #none unit }
    exhaust(|| {
        var property_name
        case tokens |> iter::next() {
            #none -> return #end unit // normal end
            #some p -> case p {
                #ok t -> {
                    case t.type == "identifier" -> property_name = t.content
                    else {
                        encountered.error = #some unmet_expect(
                            "a project property", t.content
                        )
                        return #end unit
                    }
                }
                #err e -> {
                    encountered.error = #some e
                    return #end unit
                }
            }
        }
        case tokens |> iter::next() {
            #none -> {
                encountered.error = #some unexpected_end(
                    "an equals-sign ('=')"
                )
                return #end unit
            }
            #some p -> case p {
                #ok t -> case t.type != "equals" -> {
                    encountered.error = #some unmet_expect(
                        "an equals-sign ('=')", t.content
                    )
                    return #end unit
                }
                #err e -> {
                    encountered.error = #some e
                    return #end unit
                }
            }
        }
        case property_name {
            "name" -> case tokens |> parse_string() {
                #ok s -> {
                    case s |> str::iter()
                        |> iter::find(|c| !is_alphanumerical(c))
                        |> opt::is_some() -> {
                        encountered.error = #some "\
Package names may only consist of letters, digits and underscores!"
                        return #end unit
                    } else {
                        project.name = #some s
                    }
                }
                #err e -> {
                    encountered.error = #some e
                    return #end unit
                }
            }
            "description" -> case tokens |> parse_string() {
                #ok s -> project.description = #some s
                #err e -> {
                    encountered.error = #some e
                    return #end unit
                }
            }
            "authors" -> case tokens |> parse_string_list() {
                #ok l -> project.authors = #some l
                #err e -> {
                    encountered.error = #some e
                    return #end unit
                }
            }
            "version" -> case tokens |> parse_string() {
                #ok s -> project.version = #some s
                #err e -> {
                    encountered.error = #some e
                    return #end unit
                }
            }
            "target" -> case tokens |> parse_string() {
                #ok s -> {
                    case s {
                        "any" -> {} "c" -> {} "js" -> {}
                    } else {
                        encountered.error = #some "'_' is not a valid ctarget!"
                            |> str::fmt([s])
                        return #end unit
                    }
                    project.ctarget = #some s
                }
                #err e -> {
                    encountered.error = #some e
                    return #end unit
                }
            }
            "dependencies" -> case tokens |> parse_resource_list() {
                #ok l -> project.dependencies = #some l
                #err e -> {
                    encountered.error = #some e
                    return #end unit
                }
            }
            "main" -> case tokens |> parse_string() {
                #ok s -> project.main = #some s
                #err e -> {
                    encountered.error = #some e
                    return #end unit
                }
            }
            "build" -> case tokens |> parse_string() {
                #ok s -> project.build = #some s
                #err e -> {
                    encountered.error = #some e
                    return #end unit
                }
            }
            "build_c" -> case tokens |> parse_string() {
                #ok s -> project.build_c = #some s
                #err e -> {
                    encountered.error = #some e
                    return #end unit
                }
            }
            "build_js" -> case tokens |> parse_string() {
                #ok s -> project.build_js = #some s
                #err e -> {
                    encountered.error = #some e
                    return #end unit
                }
            }
            "link_c" -> case tokens |> parse_string_list() {
                #ok l -> project.link_c = #some l
                #err e -> {
                    encountered.error = #some e
                    return #end unit
                }
            }
            "link_js" -> case tokens |> parse_string_list() {
                #ok l -> project.link_js = #some l
                #err e -> {
                    encountered.error = #some e
                    return #end unit
                }
            }
            "include" -> case tokens |> parse_string_list() {
                #ok l -> project.include = #some l
                #err e -> {
                    encountered.error = #some e
                    return #end unit
                }
            }
            "include_c" -> case tokens |> parse_string_list() {
                #ok l -> project.include_c = #some l
                #err e -> {
                    encountered.error = #some e
                    return #end unit
                }
            }
            "include_js" -> case tokens |> parse_string_list() {
                #ok l -> project.include_js = #some l
                #err e -> {
                    encountered.error = #some e
                    return #end unit
                }
            }
            "c_core_deps" -> case tokens |> parse_resource() {
                #ok s -> project.c_core_deps = #some s
                #err e -> {
                    encountered.error = #some e
                    return #end unit
                }
            }
        } else {
            encountered.error = #some "'_' is not a valid project property!"
                |> str::fmt([property_name])
            return #end unit
        }
        return #next unit
    })
    return encountered.error
        |> opt::map(|e| #err e)
        |> opt::unwrap_or(#ok project)
}