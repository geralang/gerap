
mod gerap::log

use gerap::config
use std::conc::Thread
use std::prc::Process
use std::*

proc style(properties) {
    case env::is_windows() -> return ""
    case !config::get_colored_output() -> return ""
    else return "\x1b["
        |> concat(properties |> arr::iter() |> str::join(";"))
        |> concat("m")
}

var RESET = "0"
var BOLD = "1"
var BLACK = "30"
var RED = "31"
var GREEN = "32"
var YELLOW = "33"
var BLUE = "34"
var MAGENTA = "35"
var CYAN = "36"
var WHITE = "37"
var BRIGHT_BLACK = "90"
var BRIGHT_RED = "91"
var BRIGHT_GREEN = "92"
var BRIGHT_YELLOW = "93"
var BRIGHT_BLUE = "94"
var BRIGHT_MAGENTA = "95"
var BRIGHT_CYAN = "96"
var BRIGHT_WHITE = "97"

var SPINNER_ORIENTATIONS = "|\\-/"
var SPINNER_FRAME_TIME = 250   // 0.25 seconds

proc Spinner() { return {
    rotation = 0,

    display = |self| {
        return SPINNER_ORIENTATIONS |> str::at(self.rotation)
    },
    
    move = |self| {
        self.rotation = (self.rotation + 1) % length(SPINNER_ORIENTATIONS)
        Thread::sleep(SPINNER_FRAME_TIME)
        return self
    }
} }

var last_line_length = { val = 0 }

proc log_with_spinner(thing, until) {
    var s = Spinner()
    iter::repeat_over(|| !until())
        |> iter::take_while(|f| f)
        |> iter::for_each(|f| {
            var l = "  _ _"
                |> str::fmt([s .> display(), thing])
            last_line_length.val = math::max(length(l), last_line_length.val)
            io::print(l)
            last_line_length.val..length(l) |> iter::for_each(|c| io::print(" "))
            io::print("\r")
            s .> move()
        })
}

proc log(thing) {
    var l = "    " |> concat(thing)
    io::print(l)
    last_line_length.val..length(l) |> iter::for_each(|c| io::print(" "))
    io::println("")
    last_line_length.val = 0
}

pub proc cloning(name, until) {
    "_Cloning_ _"
        |> str::fmt([
            style([BOLD, CYAN]),
            style([RESET]),
            name
        ])
        |> log_with_spinner(until)
}

pub proc building(name, until) {
    "_Building_ _"
        |> str::fmt([style([BOLD, BRIGHT_YELLOW]), style([RESET]), name])
        |> log_with_spinner(until)
}

pub proc prepared(name) {
    "_Prepared_ _"
        |> str::fmt([style([BOLD, BRIGHT_GREEN]), style([RESET]), name])
        |> log()
}

pub proc compiling(name, until) {
    "_Compiling_ _"
        |> str::fmt([style([BOLD, BRIGHT_BLUE]), style([RESET]), name])
        |> log_with_spinner(until)
}

pub proc compiled(name) {
    "_Compiled_ _"
        |> str::fmt([style([BOLD, BRIGHT_GREEN]), style([RESET]), name])
        |> log()
}

pub proc testing(name, until) {
    "_Testing_ _"
        |> str::fmt([style([BOLD, BRIGHT_YELLOW]), style([RESET]), name])
        |> log_with_spinner(until)
}

pub proc failed(name) {
    "_Failed_ __"
        |> str::fmt([
            style([BOLD, BRIGHT_RED]), 
            style([RESET, BRIGHT_RED]),
            name,
            style([RESET])
        ])
        |> log()
}

pub proc passed(name) {
    "_Passed_ _"
        |> str::fmt([style([BOLD, BRIGHT_GREEN]), style([RESET]), name])
        |> log()
}

pub proc result(passed, total) {
    "_Result_ _ / _ passed"
        |> str::fmt([
            style([BOLD, BRIGHT_BLUE]),
            style([RESET]),
            passed |> as_str(),
            total |> as_str()
        ])
        |> log()
}

pub proc error(while, message) {
    "    _Error _while __\n__"
        |> str::fmt([
            style([BOLD, BRIGHT_RED]),
            style([RESET]),
            while,
            style([BRIGHT_RED]),
            message,
            style([RESET])
        ])
        |> io::println()
    Process::exit(1)
    return panic("We just exited")
}