
mod gerap

use gerap::(files, build, parser, config)
use std::prc::Process
use std::*

var USAGE = "Usage:
  gerap new <name> 
    => Create a new project in a new directory
  gerap init
    => Create a new project in this directory
  gerap build
    => Build the project in this directory
  gerap run <args...>
    => Run the project in this directory, passing the given arguments
  gerap clean
    => Clears the cache, causing all packages to be downloaded again"

proc main() {
    var args = env::args()
    case length(args) < 2 -> {
        io::println(USAGE)
        Process::exit(1)
    }
    case args[1] {
        "new" -> {
            case length(args) != 3 -> {
                io::println(USAGE)
                Process::exit(1)
            }
            var project_name = args[2]
            case project_name |> files::make_project_dir() {
                #err e -> {
                    "Unable to create project: _"
                        |> str::fmt([e]) |> io::println()
                    Process::exit(1)
                }
            } else {}
        }
        "init" -> {
            case length(args) != 2 -> {
                io::println(USAGE)
                Process::exit(1)
            }
            case files::init_project_dir() {
                #err e -> {
                    "Unable to initialize project: _"
                        |> str::fmt([e]) |> io::println()
                    Process::exit(1)
                }
            } else {}
        }
        "build" -> {
            case length(args) != 2 -> {
                io::println(USAGE)
                Process::exit(1)
            }
            io::read_file("config.gpc")
                |> res::unwrap_or_else(|e| {
                    io::println("Unable to find package file ('config.gpc')!")
                    Process::exit(1)
                    return panic("")
                })
                |> parser::parse_file()
                |> res::unwrap_or_else(|e| {
                    "Unable to read package file: _"
                        |> str::fmt([e])
                        |> io::println()
                    Process::exit(1)
                    return panic("")
                })
                |> build::build_project()
        }
        "run" -> {
            var root_project = io::read_file("config.gpc")
                |> res::unwrap_or_else(|e| {
                    io::println("Unable to find package file ('config.gpc')!")
                    Process::exit(1)
                    return panic("")
                })
                |> parser::parse_file()
                |> res::unwrap_or_else(|e| {
                    "Unable to read package file: _"
                        |> str::fmt([e])
                        |> io::println()
                    Process::exit(1)
                    return panic("")
                })
            root_project |> build::build_project()
            var root_ctarget = root_project.ctarget
                |> opt::expect("enforced by 'build_project'")
            var project_name = root_project.name
                |> opt::expect("enforced by 'build_project'")
            var args_str = args |> arr::iter() |> iter::skip(2)
                |> str::join(" ")
            case root_ctarget {
                "c" -> {
                    ".gerap" |> concat(io::file_sep())
                        |> concat(project_name)
                        |> concat(" ") |> concat(args_str)
                        |> env::run()
                }
                "js" -> {
                    config::get_node_path()
                        |> concat(" .gerap") |> concat(io::file_sep())
                        |> concat(project_name) |> concat(".js")
                        |> concat(" ") |> concat(args_str)
                        |> env::run()
                }
            } else {
                "A package of type '_' cannot be directly executed!"
                    |> str::fmt([root_ctarget])
                    |> io::println()
                Process::exit(1)
            }
        }
        "clean" -> {
            case length(args) != 2 -> {
                io::println(USAGE)
                Process::exit(1)
            }
            files::nuke_dir(".gerap")
        }
    } else {
        io::println(USAGE)
        Process::exit(1)
    }
}