
mod gerap::files

use std::*

pub proc get_user_name() {
    case env::is_windows() -> return env::get_var("USERNAME")
        |> opt::expect("Unable to get the name of the user!")
    else return env::get_var("USER")
        |> opt::map(|v| #some v)
        |> opt::unwrap_or_else(|| env::get_var("LOGNAME"))
        |> opt::expect("Unable to get the name of the user!")
}

proc default_main_file(name) {
    return "
mod _

proc main() {
    std::io::println(\"Hello, world!\")
}
" |> str::fmt([name])
}

proc default_project_file(name) {
    return "name = \"_\"
description = \"\"
authors = [\"_\"]
version = \"0.1\"
target = \"c\"
dependencies = [
    <https://github.com/geralang/std>
]
main = \"_::main\"
"
    |> str::fmt([
        name,
        get_user_name(),
        name
    ])
}

pub proc make_project_dir(name) {
    return io::create_dir(name)
        |> res::and_then(|o| io::create_dir(
            name |> concat(io::file_sep()) |> concat("src")
        ))
        |> res::and_then(|o| io::write_file(
            default_main_file(name),
            name |> concat(io::file_sep()) |> concat("src") 
                |> concat(io::file_sep()) |> concat("main.gera")
        ))
        |> res::and_then(|o| io::write_file(
            default_project_file(name),
            name |> concat(io::file_sep()) |> concat("config.gpc") 
        ))
}

pub proc init_project_dir() {
    var name = io::get_cwd()
        |> str::split(io::file_sep())
        |> iter::last()
        |> opt::expect("Unable to get the project name!")
    return io::create_dir("src")
        |> res::and_then(|o| io::write_file(
            default_main_file(name),
            "src" |> concat(io::file_sep()) |> concat("main.gera")
        ))
        |> res::and_then(|o| io::write_file(
            default_project_file(name),
            "config.gpc"
        ))
}

pub proc nuke_dir(path) {
    io::read_dir(path)
        |> res::unwrap_or_else(|e| [])
        |> arr::iter()
        |> iter::for_each(|n| {
            var p = path |> concat(io::file_sep()) |> concat(n)
            case io::is_dir(p) -> nuke_dir(p)
            else io::delete_file(p)
        })
    io::delete_dir(path)
}