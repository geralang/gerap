
mod gerap::docs

use gerap::log

use std::opt::unwrap_or_else
use std::io::(print, println)
use std::iter::*

proc expectv(o) = o
    |> unwrap_or_else(|| log::error("Symbol file should be valid!"))

pub proc find_symbol(module, name) {
    val search = |j, f| j
        |> json::get_array() |> expectv()
        .> iter()
        |> map(-> it |> json::get_object() |> expectv())
        |> reduce(|r, c| {
            r ?none
            val n = c .> at("path") |> expectv()
                |> json::get_string() |> expectv()
            case n == name -> return #some c
            return f(c)
        }, #none unit)
    case module .> has("constants") -> {
        module .> at("constants") |> expectv()
            |> search(-> #none unit)
            ?none
    }
    case module .> has("procedures") -> {
        module .> at("procedures") |> expectv()
            |> search(-> #none unit)
            ?none
    }
    return module .> at("modules") |> expectv()
        |> search(-> it |> find_symbol(name))
}

pub proc print_info(thing) {
    println("")
    case thing .> has("information") -> {
        print(log::style([log::BOLD]))
        println("summary")
        print(log::style([]))
        thing 
            .> at("information") |> expectv()
            |> json::get_string() |> expectv()
            |> println()
        println("")
    }
    val print_paths_property = |o, property| {
        case thing .> has(property) -> {
            val items = thing .> at(property) |> expectv()
                |> json::get_array() |> expectv()
            case items.size > 0 -> {
                print(log::style([log::BOLD]))
                println(property)
                print(log::style([]))
                items .> iter()
                    |> map(-> it 
                        |> json::get_object() |> expectv()
                        .> at("path") |> expectv()
                        |> json::get_string() |> expectv()
                    )
                    |> for_each(println)
                println("")
            }
        }
    }
    thing |> print_paths_property("modules")
    thing |> print_paths_property("constants")
    thing |> print_paths_property("procedures")
    case thing .> has("arguments") -> {
        print(log::style([log::BOLD]))
        println("arguments")
        print(log::style([]))
        thing .> at("arguments") |> expectv()
            |> json::get_array() |> expectv()
            .> iter()
            |> map(-> it |> json::get_object() |> expectv())
            |> for_each(-> {
                it .> at("name") |> expectv()
                    |> json::get_string() |> expectv()
                    |> print()
                print(" - ")
                it .> at("type") |> expectv()
                    |> json::get_string() |> expectv()
                    |> println()
            })
        println("")
    }
    val print_string_property = |o, property| {
        case thing .> has(property) -> {
            print(log::style([log::BOLD]))
            println(property)
            print(log::style([]))
            thing .> at(property) |> expectv()
                |> json::get_string() |> expectv()
                |> println()
            println("")
        }
    }
    thing |> print_string_property("returns")
    thing |> print_string_property("type")
}