
mod gerap::build

use gerap::(config, parser, log)
use std::*

var DEFAULT_CCOREDEPS_REPO = "https://github.com/typesafeschwalbe/ccoredeps"

proc process_build_command(cmd, output_path, c_core_deps_path) {
    return cmd
        |> str::split("@GERAP_COLORED_OUTPUT")
        |> str::join(config::get_colored_output() |> as_str())
        |> str::split("@GERAP_GERAC_PATH")
        |> str::join(config::get_gerac_path())
        |> str::split("@GERAP_GIT_PATH")
        |> str::join(config::get_git_path())
        |> str::split("@GERAP_CC_PATH")
        |> str::join(config::get_cc_path())
        |> str::split("@GERAP_CC_ARGS")
        |> str::join(config::get_cc_args())
        |> str::split("@GERAP_NODE_PATH")
        |> str::join(config::get_node_path())
        |> str::split("@GERAP_OUTPUT_PATH")
        |> str::join(output_path)
        |> str::split("@GERAP_CCOREDEPS_PATH")
        |> str::join(c_core_deps_path)
}

proc copy_included_file(f, output_folder_path) {
    var content = f |> io::read_file() |> res::unwrap_or_else(|e| {
        return log::error("copying included file", e)
    })
    var fname = f |> str::split(io::file_sep()) |> iter::last()
        |> opt::expect("'split' returns >1 elements")
    mut var fdest = output_folder_path
    case !str::ends_with(fdest, io::file_sep()) -> {
        fdest = fdest |> concat(io::file_sep())
    }
    fdest = fdest |> concat(fname)
    content |> io::write_file(fdest)
}

proc run_build_command(build_cmd, name) {
    var args = build_cmd
        |> str::split(" ")
        |> iter::filter(|p| length(p) > 0)
    var build_p = prc::Process(
        args |> iter::next() |> opt::unwrap_or(""),
        args |> arr::collect()
    )
    log::building(name, || build_p .> is_done())
    case opt::unwrap_or(build_p .> exit_code(), 1) != 0 -> {
        log::error(
            "building " |> concat(name),
            build_p .> eoutput()
        )
    }
}

pub proc build_project(root_project) {
    var root_name = root_project.name |> opt::unwrap_or_else(|| {
            return log::error(
                "processing the project",
                "The project does not define a name!"
            )
        })
    io::create_dir(".gerap")
    var output_path = io::canonicalize(".gerap")
        |> res::expect("we just created it")
    var root_ctarget = root_project.ctarget |> opt::unwrap_or_else(|| {
            return log::error(
                "processing the project",
                "The project does not define a target type!"
            )
        })
    case root_ctarget == "any" -> {
        log::error(
            "processing the project",
            "The project is of type 'any', but is not a dependency!"
        )
    }
    var c_core_deps_path
    var c_core_deps_file
    case root_ctarget == "c" -> {
        var root_c_core_deps = root_project.c_core_deps |> opt::unwrap_or(
                #url DEFAULT_CCOREDEPS_REPO
            )
        var ccdp
        case root_c_core_deps {
            #url u -> {
                ccdp = ".gerap/.ccoredeps"
                case !io::file_exists(ccdp) -> {
                    var clone_p = prc::Process(
                        config::get_git_path(),
                        ["clone", u, ccdp]
                    )
                    log::cloning(u, || clone_p .> is_done())
                    case opt::unwrap_or(clone_p .> exit_code(), 1) != 0 -> {
                        log::error(
                            "cloning the C core dependencies",
                            clone_p .> eoutput()
                        )
                    }
                }
            }
            #file f -> ccdp = f
        }
        c_core_deps_path = ccdp
            |> io::canonicalize()
            |> res::unwrap_or_else(|e| {
                return log::error(
                    "processing the project",
                    "Unable to locate C core dependencies at '_'!"
                        |> str::fmt([ccdp])
                )
            })
        mut var ccdf = c_core_deps_path
        case !str::ends_with(ccdf, io::file_sep())
            -> ccdf = ccdf |> concat(io::file_sep())
        ccdf = ccdf |> concat("coredeps.c")
        case io::file_exists(ccdf) && io::is_file(ccdf)
            -> c_core_deps_file = ccdf |> concat(" ")
        else c_core_deps_file = ""
    } else {
        c_core_deps_path = ""
        c_core_deps_file = ""
    }
    var source_files = { files = [] }
    var linked_files = { files = [] }
    collect_source_files(
        "src", #none unit, static [".gera", ".gem"], source_files
    )
    resolve_dependencies(
        root_project, root_ctarget, ".", source_files, linked_files,
        root_ctarget, output_path, c_core_deps_path
    )
    root_project.build |> opt::map(|command| {
            run_build_command(process_build_command(
                command, output_path, c_core_deps_path
            ), "the project")
        })
    root_project.build_c |> opt::map(|command| {
            case root_ctarget == "c" -> {
                run_build_command(process_build_command(
                    command, output_path, c_core_deps_path
                ), "the project")
            }
        })
    root_project.build_js |> opt::map(|command| {
            case root_ctarget == "js" -> {
                run_build_command(process_build_command(
                    command, output_path, c_core_deps_path
                ), "the project")
            }
        })
    root_project.link_c |> opt::map(|l| {
            case root_ctarget == "c" -> {
                l |> arr::iter() |> iter::for_each(|f| {
                    case linked_files.files |> arr::iter()
                        |> iter::find(|c| c == f)
                        |> opt::is_none()
                        -> linked_files.files = linked_files.files
                            |> arr::concat([f])
                })
            }
        })
    root_project.link_js |> opt::map(|l| {
            case root_ctarget == "js" -> {
                l |> arr::iter() |> iter::for_each(|f| {
                    case linked_files.files |> arr::iter()
                        |> iter::find(|c| c == f)
                        |> opt::is_none()
                        -> linked_files.files = linked_files.files
                            |> arr::concat([f])
                })
            }
        })
    root_project.include |> opt::map(|l| l |> arr::iter() |> iter::for_each(|f| {
            copy_included_file(f, output_path)
        }))
    root_project.include_c |> opt::map(|l| l |> arr::iter() |> iter::for_each(|f| {
            case root_ctarget == "c" -> copy_included_file(f, output_path)
        }))
    root_project.include_js |> opt::map(|l| l |> arr::iter() |> iter::for_each(|f| {
            case root_ctarget == "js" -> copy_included_file(f, output_path)
        }))
    var gera_files_str = source_files.files |> arr::iter()
        |> iter::map(|f| "\"_\"" |> str::fmt([f]))
        |> str::join(" ")
    var main_path = root_project.main |> opt::unwrap_or_else(|| {
            return log::error(
                "processing the project",
                "The project does not define a main procedure!"
            )
        })
    var output_file = ".gerap" |> concat(io::file_sep()) |> concat(root_name)
        |> concat(".") |> concat(root_ctarget)
    var gerac_colored
    case config::get_colored_output() -> gerac_colored = ""
    else gerac_colored = "-c"
    var gerac_cmd = "_ _ -m _ -t _ -o _ _"
        |> str::fmt([
            config::get_gerac_path(),
            gera_files_str,
            main_path,
            root_ctarget,
            output_file,
            gerac_colored
        ])
    var gerac_cmd_args = gerac_cmd
        |> str::split(" ")
        |> iter::filter(|p| length(p) > 0)
    var gerac_p = prc::Process(
        gerac_cmd_args |> iter::next() |> opt::unwrap_or(""),
        gerac_cmd_args |> arr::collect()
    )
    log::compiling(root_name, || gerac_p .> is_done())
    case opt::unwrap_or(gerac_p .> exit_code(), 1) != 0 -> {
        log::error(
            "compiling " |> concat(root_name),
            gerac_p .> eoutput()
        )
    }
    case root_ctarget {
        "c" -> {
            var linked_files_str = linked_files.files |> arr::iter()
                |> iter::map(|f| "\"_\"" |> str::fmt([f]))
                |> str::join(" ")
            var exec_file = ".gerap" |> concat(io::file_sep())
                |> concat(root_name)
            var cc_cmd = "_ _ _ _-lm _-o _ -I _"
                |> str::fmt([
                    config::get_cc_path(),
                    linked_files_str,
                    output_file,
                    c_core_deps_file, // adds space at the end if exists
                    config::get_cc_args(), // adds space at the end if exists
                    exec_file,
                    c_core_deps_path
                ])
            var cc_cmd_args = cc_cmd
                |> str::split(" ")
                |> iter::filter(|p| length(p) > 0)
            var cc_p = prc::Process(
                cc_cmd_args |> iter::next() |> opt::unwrap_or(""),
                cc_cmd_args |> arr::collect()
            )
            log::compiling(root_name, || cc_p .> is_done())
            case opt::unwrap_or(cc_p .> exit_code(), 1) != 0 -> {
                log::error(
                    "compiling " |> concat(root_name),
                    cc_p .> eoutput()
                )
            }
        }
        "js" -> {
            var linked = { output = "" }
            linked_files.files |> arr::iter() |> iter::for_each(|f| {
                linked.output = linked.output
                    |> concat(f |> io::read_file() |> res::unwrap_or_else(|e| {
                        return log::error(
                            "linking file '_'" |> str::fmt([f]),
                            e
                        )
                    }))
                    |> concat("\n")
            })
            var output = output_file |> io::read_file()
                |> res::expect("should still be there!")
            linked.output |> concat(output) |> io::write_file(output_file)
        }
    }
}

proc resolve_dependencies(
    project, project_ctarget, project_path, gera_files, linked_files,
    root_ctarget, output_path, c_core_deps_path
) {
    project.dependencies
        |> opt::map(|deps| deps |> arr::iter() |> iter::for_each(|d| {
            var dep_dir
            var dep_name
            case d {
                #url u -> {
                    dep_dir = clone_dependency(u)
                    dep_name = u
                }
                #file f -> {
                    var og_cwd = io::get_cwd()
                    io::set_cwd(project_path)
                    dep_dir = io::canonicalize(f)
                        |> res::unwrap_or_else(|e| {
                            return log::error(
                                "resolving local dependency",
                                "Unable to find local dependency '_'!"
                                    |> str::fmt([f])
                            )
                        })
                    io::set_cwd(og_cwd)
                    dep_name = f
                }
            }
            var dep_p_file = dep_dir |> concat(io::file_sep()) 
                |> concat("config.gpc")
            var dep = io::read_file(dep_p_file)
                |> res::unwrap_or_else(|e| {
                    return log::error(
                        "processing dependency " |> concat(dep_name),
                        "Unable to locate package configuration file!"
                    )
                })
                |> parser::parse_file()
                |> res::unwrap_or_else(|e| {
                    return log::error(
                        "processing configuration file for "
                            |> concat(dep_name),
                        e
                    )
                })
            var dep_ctarget = dep.ctarget |> opt::unwrap_or_else(|| {
                return log::error(
                    "processing dependency " |> concat(dep_name),
                    "The package does not define a target type!"
                )
            })
            case project_ctarget != dep_ctarget && dep_ctarget != "any" -> {
                log::error(
                    "processing dependency " |> concat(dep_name),
                    "The package has the target type '_', \
but its dependent has the target type '_'!"
                        |> str::fmt([dep_ctarget, project_ctarget])
                )
            }
            var dep_src_dir = dep_dir |> concat(io::file_sep()) |> concat("src")
            collect_source_files(
                dep_src_dir, #some dep_name, static [".gera", ".gem"],
                gera_files 
            )
            dep.build |> opt::map(|command| {
                var og_cwd = io::get_cwd()
                io::set_cwd(dep_dir)
                run_build_command(process_build_command(
                    command, output_path, c_core_deps_path
                ), dep_name)
                io::set_cwd(og_cwd)
            })
            dep.build_c |> opt::map(|command| {
                case root_ctarget == "c" -> {
                    var og_cwd = io::get_cwd()
                    io::set_cwd(dep_dir)
                    run_build_command(process_build_command(
                        command, output_path, c_core_deps_path
                    ), dep_name)
                    io::set_cwd(og_cwd)
                }
            })
            dep.build_js |> opt::map(|command| {
                case root_ctarget == "js" -> {
                    var og_cwd = io::get_cwd()
                    io::set_cwd(dep_dir)
                    run_build_command(process_build_command(
                        command, output_path, c_core_deps_path
                    ), dep_name)
                    io::set_cwd(og_cwd)
                }
            })
            dep.link_c |> opt::map(|l| {
                    case root_ctarget == "c" -> {
                        var og_cwd = io::get_cwd()
                        io::set_cwd(dep_dir)
                        l |> arr::iter()
                            |> iter::map(|f| io::canonicalize(f)
                                |> res::unwrap_or_else(|e| {
                                    return log::error(
                                        "processing dependency "
                                            |> concat(dep_name),
                                        "Unable to locate linked file '_'!"
                                            |> str::fmt([f])
                                    )
                                })
                            )
                            |> iter::for_each(|f| {
                                case linked_files.files |> arr::iter()
                                    |> iter::find(|c| c == f)
                                    |> opt::is_none()
                                    -> linked_files.files = linked_files.files
                                        |> arr::concat([f])
                            })
                        io::set_cwd(og_cwd)
                    }
                })
            dep.link_js |> opt::map(|l| {
                    case root_ctarget == "js" -> {
                        var og_cwd = io::get_cwd()
                        io::set_cwd(dep_dir)
                        l |> arr::iter()
                            |> iter::map(|f| io::canonicalize(f)
                                |> res::unwrap_or_else(|e| {
                                    return log::error(
                                        "processing dependency "
                                            |> concat(dep_name),
                                        "Unable to locate linked file '_'!"
                                            |> str::fmt([f])
                                    )
                                })
                            )
                            |> iter::for_each(|f| {
                                case linked_files.files |> arr::iter()
                                    |> iter::find(|c| c == f)
                                    |> opt::is_none()
                                    -> linked_files.files = linked_files.files
                                        |> arr::concat([f])
                            })
                        io::set_cwd(og_cwd)
                    }
                })
            dep.include |> opt::map(|l| {
                var og_cwd = io::get_cwd()
                io::set_cwd(dep_dir)
                l |> arr::iter() |> iter::for_each(|f| {
                    var fp = io::canonicalize(f)
                        |> res::unwrap_or_else(|e| {
                            return log::error(
                                "processing dependency "
                                    |> concat(dep_name),
                                "Unable to locate included file '_'!"
                                    |> str::fmt([f])
                            )
                        })
                    copy_included_file(fp, output_path)
                })
                io::set_cwd(og_cwd)
                return unit
            })
            dep.include_c |> opt::map(|l| {
                case root_ctarget == "c" -> {
                    var og_cwd = io::get_cwd()
                    io::set_cwd(dep_dir)
                    l |> arr::iter() |> iter::for_each(|f| {
                        var fp = io::canonicalize(f)
                            |> res::unwrap_or_else(|e| {
                                return log::error(
                                    "processing dependency "
                                        |> concat(dep_name),
                                    "Unable to locate included file '_'!"
                                        |> str::fmt([f])
                                )
                            })
                        copy_included_file(fp, output_path)
                    })
                    io::set_cwd(og_cwd)
                }
            })
            dep.include_js |> opt::map(|l| {
                case root_ctarget == "js" -> {
                    var og_cwd = io::get_cwd()
                    io::set_cwd(dep_dir)
                    l |> arr::iter() |> iter::for_each(|f| {
                        var fp = io::canonicalize(f)
                            |> res::unwrap_or_else(|e| {
                                return log::error(
                                    "processing dependency "
                                        |> concat(dep_name),
                                    "Unable to locate included file '_'!"
                                        |> str::fmt([f])
                                )
                            })
                        copy_included_file(fp, output_path)
                    })
                    io::set_cwd(og_cwd)
                }
            })
            log::prepared(dep_name)
            resolve_dependencies(
                dep, dep_ctarget, dep_dir, gera_files, linked_files,
                root_ctarget, output_path, c_core_deps_path
            )
        }))
}

proc clone_dependency(url) {
    var h = url |> hash()
    var dest_dir = ".gerap" |> concat(io::file_sep()) |> concat(h |> as_str())
    case io::is_dir(dest_dir) -> return dest_dir
    var git_p = prc::Process(
        config::get_git_path(),
        [url, dest_dir]
    )
    log::cloning(url, || git_p .> is_done())
    case opt::unwrap_or(git_p .> exit_code(), 1) != 0 -> {
        log::error(
            "cloning " |> concat(url), 
            git_p .> eoutput()
        )
    }
    return dest_dir
}

proc collect_source_files(path, dep_name, extensions, dest) {
    path |> io::read_dir()
        |> res::unwrap_or_else(|e| {
            return log::error(
                dep_name
                    |> opt::map(|d| "processing dependency " |> concat(d))
                    |> opt::unwrap_or("processing the project"),
                "Unable to locate the source directory!"
            )
        })
        |> arr::iter()
        |> iter::filter(|name| 
            opt::is_some(extensions 
                |> arr::iter() 
                |> iter::find(|e| name |> str::ends_with(e))
            ) || (
                path |> concat(io::file_sep()) |> concat(name) |> io::is_dir()
            )
        )
        |> iter::for_each(|name| {
            var item_path = path |> concat(io::file_sep()) |> concat(name)
            case item_path |> io::is_file() -> {
                case dest.files |> arr::iter()
                    |> iter::find(|c| c == item_path)
                    |> opt::is_none()
                    -> dest.files = dest.files |> arr::concat([item_path])
            } else {
                item_path |> collect_source_files(dep_name, extensions, dest)
            }
        })
}