
mod gerap::cli

use gerap::log
use gerap::pkg

use std::env::args
use std::arr::(iter, collect)
use std::iter::(skip, take_while)
use std::str::starts_with
use std::io::println

val USAGE = "Usage:
    gerap new <name> 
        -> create a new package in a new directory
    gerap init
        -> create a new package in this directory
    gerap build
        -> build the project in this directory
    gerap run
        -> run the project in this directory
    gerap test
        -> runs all tests for this package using the C target
    gerap info <thing>
        -> print information about a constant, procedure or module
    gerap doc <modules...>
        -> generate documentation for all given module names
    gerap clean
        -> delete all files generated by gerap"

proc main() {
    gerap::config::load()
    case length(args()) <= 1 -> {
        println(USAGE)
        return unit
    }
    case args()[1] {
        "new" -> {
            case length(args()) <= 2
                -> log::error("Missing name of new package!")
        }
        "init" -> {

        }
        "build" -> {
            val p = pkg::read_config("gerap.json")
            
        }
        "run" -> {

        }
        "test" -> {

        }
        "info" -> {
            case length(args()) <= 2
                -> log::error("Missing the path of the thing to document!")
        }
        "doc" -> {
            // val modules = args()
            //     |> iter()
            //     |> skip(2)
            //     |> take_while(-> !starts_with(it, "--"))
            //     |> collect()
        }
        "clean" -> {
            
        }
    } else println(USAGE)
}