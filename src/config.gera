
mod gerap::config

use gerap::log

use std::env
use std::opt::(is_some, is_none, map, unwrap_or, expect)
use std::arr::iter
use std::iter::(for_each, next)
use std::str::(starts_with, join)

proc use_color() {
    case env::get_var("NO_COLOR") |> is_some() -> return false
    case env::get_var("GERAP_NO_COLOR") |> is_some() -> return false
    return true
}

proc gerac_path() {
    case env::get_var("GERAP_GERAC_PATH") {
        #some path -> return path
        #none -> return log::error(
            "The environment variable 'GERAP_GERAC_PATH' has not been set!"
        )
    }
}

proc git_path() = env::get_var("GERAP_GIT_PATH")
    |> unwrap_or("git")

proc cc_path() = env::get_var("GERAP_CC_PATH")
    |> unwrap_or("cc")

proc cc_args() = env::get_var("GERAP_CC_ARGS")
    |> unwrap_or("")

proc js_path() = env::get_var("GERAP_JS_PATH")
    |> unwrap_or("node")

pub val CONFIG = {
    use_color = true,
    gerac_path = "",
    git_path = "",
    cc_path = "",
    cc_args = "",
    js_path = ""
}

pub proc load() {
    CONFIG.use_color = use_color()
    CONFIG.git_path = git_path()
    CONFIG.cc_path = cc_path()
    CONFIG.cc_args = cc_args()
    CONFIG.js_path = js_path()
    val args = env::args() |> iter()
    args |> for_each(|arg| {
        case arg {
            "--no-color" -> CONFIG.use_color = false
            "--cc-path" -> {
                val value = args |> next()
                val value_missing = value
                    |> map(-> it |> starts_with("--"))
                    |> unwrap_or(true)
                case value_missing
                    -> log::error("Missing value for argument '--cc-path'")
                CONFIG.cc_path = value |> expect("checked above")
            }
            "--cc-args" -> {
                CONFIG.cc_args = args |> join(" ")
            }
        }
    })
    // this one can fail, so we need to determine if we display colors first
    CONFIG.gerac_path = gerac_path()
}
